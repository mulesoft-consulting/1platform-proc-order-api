<?xml version="1.0" encoding="UTF-8"?>
<mule 
xmlns:customer-ap-ifor-sap="http://www.mulesoft.org/schema/mule/customer-ap-ifor-sap"
xmlns:product-ap-ifor-sap="http://www.mulesoft.org/schema/mule/product-ap-ifor-sap"
xmlns:custom-metrics="http://www.mulesoft.org/schema/mule/custom-metrics" 
xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns:tls="http://www.mulesoft.org/schema/mule/tls" 
xmlns:order-sapapi="http://www.mulesoft.org/schema/mule/order-sapapi" 
xmlns:order-apifor-comm-dix-my-sql="http://www.mulesoft.org/schema/mule/order-apifor-comm-dix-my-sql" 
xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" 
xmlns:http="http://www.mulesoft.org/schema/mule/http" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/order-apifor-comm-dix-my-sql http://www.mulesoft.org/schema/mule/order-apifor-comm-dix-my-sql/current/mule-order-apifor-comm-dix-my-sql.xsd
http://www.mulesoft.org/schema/mule/order-sapapi http://www.mulesoft.org/schema/mule/order-sapapi/current/mule-order-sapapi.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/custom-metrics http://www.mulesoft.org/schema/mule/custom-metrics/current/mule-custom-metrics.xsd
http://www.mulesoft.org/schema/mule/product-ap-ifor-sap http://www.mulesoft.org/schema/mule/product-ap-ifor-sap/current/mule-product-ap-ifor-sap.xsd
http://www.mulesoft.org/schema/mule/customer-ap-ifor-sap http://www.mulesoft.org/schema/mule/customer-ap-ifor-sap/current/mule-customer-ap-ifor-sap.xsd">

    <http:listener-config name="order-api-spec-httpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="${https.port}" protocol="HTTPS">
            <tls:context>
                <tls:key-store type="jks" path="${keystore.path}" keyPassword="${keystore.password}" password="${keystore.password}" />
            </tls:context>
        </http:listener-connection>
    </http:listener-config>	

    <apikit:config name="order-api-spec-config" raml="order-api-spec.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus"/>
    <order-apifor-comm-dix-my-sql:config name="Order_API_for_CommDix_MySQL_Config" doc:name="Order API for CommDix MySQL Config" doc:id="bcb83043-1fa2-42f5-898d-f0d9d80f0012" property_host="${commdix.host}" property_port="${commdix.port}" property_basePath="${commdix.basePath}" property_protocol="${commdix.protocol}" property_client-id="${app.client_id}" property_client-secret="${app.client_secret}" />
	<order-sapapi:config name="Order_SAP_API_Config" doc:name="Order SAP API Config" doc:id="ef8df3b9-dede-44e9-9764-3bed2eff2ee7" property_host="${sap.order.host}" property_port="${sap.order.port}" property_basePath="${sap.order.basePath}" property_protocol="${sap.order.protocol}" property_client-id="${app.client_id}" property_client-secret="${app.client_secret}" />
	<product-ap-ifor-sap:config name="Product_API_for_SAP_Config" doc:name="Product API for SAP Config" doc:id="1aa0e83d-2316-4069-93cc-ed0d634178ad" property_host="${sap.product.host}" property_port="${sap.product.port}" property_basePath="${sap.product.basePath}" property_protocol="${sap.product.protocol}" property_client-id="${app.client_id}" property_client-secret="${app.client_secret}"/>
	<customer-ap-ifor-sap:config name="Customer_API_for_SAP_Config" doc:name="Customer API for SAP Config" doc:id="abaf498d-33dc-456c-abba-fcc7f211a60d" property_host="${sap.customer.host}" property_port="${sap.customer.port}" property_basePath="${sap.customer.basePath}" property_protocol="${sap.customer.protocol}" property_client-id="${app.client_id}" property_client-secret="${app.client_secret}" />
	<flow name="order-api-spec-main">
        <http:listener config-ref="order-api-spec-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="order-api-spec-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" doc:id="13381e96-d37c-4ea9-b1cb-e5ee6f62e38a">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus"><![CDATA[400]]></ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="order-api-spec-console">
        <http:listener config-ref="order-api-spec-httpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="order-api-spec-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="put:\orders\(id):application\json:order-api-spec-config">
        <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" doc:id="47f4e224-6ca4-4641-892a-c5f556a3c3e8">
            <ee:variables>
                <ee:set-variable variableName="id"><![CDATA[attributes.uriParams.id]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" doc:id="8b3609a4-e7e8-46c3-9fd6-d17140f94204" doc:name="Not implemented response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  meta: {
    messages: [
      {
        severity: "ERROR",
        code: "501",
        description: "Not Implemented"
      }
    ],
    totalItems: 3,
    pagingOffset: 1,
    pagingLimit: 15
  }
}]]></ee:set-payload>
            </ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
501]]></ee:set-variable>
			</ee:variables>
        </ee:transform>
    </flow>
    <flow name="delete:\orders\(id):order-api-spec-config">
        <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" doc:id="29e0d838-84d2-4bf9-940c-90278a489ecb">
            <ee:variables>
                <ee:set-variable variableName="id"><![CDATA[attributes.uriParams.id]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
		<ee:transform doc:name="Not implemented response" doc:id="454b01de-f983-4ee2-aea3-da9de55c13a3" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  meta: {
    messages: [
      {
        severity: "ERROR",
        code: "501",
        description: "Not Implemented"
      }
    ],
    totalItems: 3,
    pagingOffset: 1,
    pagingLimit: 15
  }
}]]></ee:set-payload>
				<ee:set-attributes ><![CDATA[%dw 2.0
output application/java
---
{
	
}]]></ee:set-attributes>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
501]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
    </flow>
    <flow name="lookup_customer_sap_id" doc:id="198cfd1d-ea02-43fe-a9f6-b6b3dc81e7d3" >
		<customer-ap-ifor-sap:get-customers doc:name="Get customers" doc:id="4906c5f4-66bb-4172-88c9-7838a6918127" number="#[payload]" config-ref="Customer_API_for_SAP_Config"/>
		<ee:transform doc:name="Return only the SAP ID" doc:id="08de52e2-60c1-479e-81d2-f057d8c34dee" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.customers[0].id]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="lookup_customer_domain_id" doc:id="784a6f51-1f55-4229-8490-2b2981fb845b" >
		<customer-ap-ifor-sap:get-customer-by-id doc:name="Get customer by ID" doc:id="2acd4564-a910-4c45-b808-894f8d2c0548" id="#[payload]" config-ref="Customer_API_for_SAP_Config"/>
		<ee:transform doc:name="Return only the Domain ID" doc:id="d9bc71cf-a43e-4eaf-815b-5668cb663ec5" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.number]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="lookup_product_domain_id" doc:id="bf10b4e1-ca4a-4d36-9799-eb382d9d24b0" >
		<product-ap-ifor-sap:get-product-by-id doc:name="Get product by ID" doc:id="71b069b2-edd8-4361-9abc-0c16da862d54" config-ref="Product_API_for_SAP_Config" id="#[payload]"/>
		<ee:transform doc:name="Return only the Domain ID" doc:id="5117ca4c-9f51-45d7-8242-62902338cfb5" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.productNumber]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="lookup_product_sap_id" doc:id="accc1b97-689c-41e7-88db-08b841b9e7bf" >
		<product-ap-ifor-sap:get-products doc:name="Get products" doc:id="4e6cca75-7a63-44aa-bd7a-a9e4690b6466" product-number="#[payload]" config-ref="Product_API_for_SAP_Config"/>
		<ee:transform doc:name="Return only the SAP ID" doc:id="b936b9b4-4dae-416f-a978-a5d75cc63164" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.products[0].id]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="get:\orders:order-api-spec-config">
		<ee:transform doc:name="Set Customer Id" doc:id="d75d3934-0479-43fb-b7d3-a3af605a1e0b" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="customerId" ><![CDATA[%dw 2.0
output application/java
---
attributes.queryParams.customerId]]></ee:set-variable>
				<ee:set-variable variableName="pagination" ><![CDATA[%dw 2.0
output application/java
---
{
	offset: (attributes.queryParams.pagingOffset default 0) as Number,
	limit: (attributes.queryParams.maxResults default 10) as Number
}]]></ee:set-variable>
				<ee:set-variable variableName="sapCustomerId" ><![CDATA[%dw 2.0
output application/java
---
lookup('lookup_customer_sap_id', attributes.queryParams.customerId, 5000)]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<scatter-gather doc:name="Scatter-Gather" doc:id="2698fb39-93ca-4cfe-b571-38e65ed750a1" >
			<route >
				<order-apifor-comm-dix-my-sql:get-orders doc:name="Get CommDix orders" doc:id="cc9255eb-af95-4653-8dae-d1a318c9ec7d" customer-id="#[vars.customerId]" config-ref="Order_API_for_CommDix_MySQL_Config"/>
			</route>
			<route >
				<order-sapapi:get-orders doc:name="Get SAP orders" doc:id="870696a4-9fa0-4606-b5a3-69576e03af34" customer-id="#[vars.sapCustomerId]" config-ref="Order_SAP_API_Config"/>
				<ee:transform doc:name="Transform Message getting Product Domain ID" doc:id="699941de-36c8-4ae3-ba78-daa32a9ccfb4" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	meta: payload.meta,
	(if (payload.links != null) links: payload.links else null),
	orders: payload.orders map (
		($ - "orderItems") ++ 
		orderItems: ($.orderItems map {
			locationId: $.locationId  default "l1",
		    orderLine: $.orderLine,
		    product: {
		        id: lookup('lookup_product_domain_id',$.product.id, 5000)
		    },
		    quantity: {
		        ordered: $.quantity.ordered,
		        shipped: $.quantity.shipped default 0
		    },
		    pricing: {
		    		itemAmount: $.pricing.itemAmount,
	             discountedAmount: $.pricing.discountedAmount,
	             totalAmount: $.pricing.totalAmount,
	             currency: {
	             	code: $.pricing.currency.code default "USD"
	             }
			},
		    delivery: {
		        method: $.delivery.method
		    }
		} default [])
	)
}

]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</route>
		</scatter-gather>
		<ee:transform doc:name="Set Response" doc:id="5d19a533-1b3a-4548-bfa4-499281fa7555" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var orders = (payload."0".payload.orders default []) ++ (payload."1".payload.orders default [])
var filteredOrders = orders filter (($.orderId as Number) > (p("order.fromId") as Number))
// returns ordered by orderId desc, the last 10 by default
// var grupedOrders = (filteredOrders groupBy ($.orderId as Number)) pluck $ orderBy(-$[0].orderId as Number)
// returns ordered by orderId asc, the last 10 by default
var grupedOrders = (filteredOrders groupBy ($.orderId as Number)) pluck $ orderBy(-$[0].orderDateTime as DateTime as Number)
fun resetOrderLine(items) = items map (
	($ - "orderLine") ++ { orderLine: $$}
)
var start = (vars.pagination.offset * vars.pagination.limit)
var tmpend = ((vars.pagination.offset + 1) * vars.pagination.limit) - 1
var end = if(sizeOf(grupedOrders) > tmpend) tmpend else sizeOf(grupedOrders) - 1
var mergedOrders = grupedOrders[start to end] map
((orderPack, index) -> 
    if(sizeOf(orderPack) > 1)  
        {
        		orderId: orderPack[0].orderId as Number as String {format: "0000000000"},
        		customerId: vars.customerId,
			sourceSystem: orderPack.*sourceSystem joinBy ", ",
			orderItems: resetOrderLine(flatten(orderPack.*orderItems))
		} ++ (orderPack[0] - "orderId"- "orderItems" - "sourceSystem" - "customerId") 
    else 
    		{ 
    			orderId: orderPack[0].orderId as Number as String {format: "0000000000"},
    			customerId: vars.customerId
    		}
        ++ (orderPack[0] - "orderId" - "customerId")
        
)


---
{
	meta: {
		totalItems: sizeOf( grupedOrders ),
		pagingOffset: vars.pagination.offset,
		pagingLimit: vars.pagination.limit
	},
	orders:  mergedOrders default []
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
    </flow>
	<flow name="get:\orders\(id):order-api-spec-config">
        <ee:transform xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" doc:id="838db775-ee3e-4a74-b3bb-6d206894c9e3" doc:name="Set Id">
            <ee:variables>
                <ee:set-variable variableName="id"><![CDATA[attributes.uriParams.id]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <try doc:name="Try" doc:id="1133606f-d375-48ce-814f-98d60adfafb7" >
			<scatter-gather doc:name="Scatter-Gather" doc:id="d22c3766-6655-410d-847a-8f977a060b68">
			<route>
				<flow-ref doc:name="get-commdix-order" doc:id="282cfacf-aa30-4f7c-ba9a-145e02bc935e" name="get-commdix-order" />
			</route>
			<route>
				<flow-ref doc:name="get-sap-order" doc:id="8f501d17-a470-4140-ae99-a61be84174fe" name="get-sap-order" />
			</route>
		</scatter-gather>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="00c8d8ee-999b-438e-8778-45f8b2aed21e" >
					<logger level="ERROR" doc:name="Not handled error" doc:id="0b5122e1-b656-4fea-9ba6-90627c528fea" message="Not handled error"/>
				</on-error-continue>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="b9728102-6654-4d88-bd15-6a3c5df5ad71" message="#[output application/json ---payload]"/>
		<ee:transform doc:name="Create Response" doc:id="13d145a5-fe70-4a5f-9e54-cdc43198e87e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

var hasCommDixOrder = not (vars.commDixNotFound default false)
var hasSapOrder = not (vars.sapNotFound default false)

var mainOrder = if(hasCommDixOrder) payload."0".payload 
	else if(hasSapOrder) payload."1".payload 
	else null
	
var commdixItems:Array<Object> = if (hasCommDixOrder) payload."0".payload.orderItems else []
var sapItems:Array<Object> = if (hasSapOrder) payload."1".payload.orderItems else []
var items:Array<Object> = commdixItems ++ sapItems
	
var sources = (if (hasCommDixOrder) [payload."0".payload.sourceSystem] else []) 
	++ ( if (hasSapOrder) [payload."1".payload.sourceSystem] else [])

fun resetOrderLine(items) = items map (
	($ - "orderLine") ++ { orderLine: $$}
)
---
if (mainOrder != null)
	(mainOrder default {}) - "orderItems" - "sourceSystem" ++ {
		sourceSystem: sources joinBy ", ",
		orderItems: resetOrderLine(items)
	}
else 
	{
	  "messageId": "",
	  "itemId": vars.id,
	  "severity": "ERROR",
	  "code": "404",
	  "description": "Not Found"
	}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
var hasCommDixOrder = not (vars.commDixNotFound default false)
var hasSapOrder = not (vars.sapNotFound default false)

---
if(hasCommDixOrder or hasSapOrder)
	200
else
	404]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
    </flow>
    <flow name="get-commdix-order" doc:id="2a949c76-c92f-4165-8b57-c36dbbb8fb69" >
		<order-apifor-comm-dix-my-sql:get doc:name="Get CommDix Order" doc:id="221e338f-2b97-49ce-8855-33a08c089a33" config-ref="Order_API_for_CommDix_MySQL_Config" id="#[vars.id as Number]" />
		<error-handler >
			<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="9dd401a2-88a4-40e2-9836-c1467b974935" type="ORDER-APIFOR-COMM-DIX-MY-SQL:NOT_FOUND">
							<ee:transform doc:name="Set Not Found" doc:id="ce9847d3-d725-414b-9016-04a1a1cf352f">
								<ee:message>
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{}]]></ee:set-payload>
								</ee:message>
								<ee:variables>
									<ee:set-variable variableName="commDixNotFound"><![CDATA[%dw 2.0
output application/java
---
true]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
				<logger level="DEBUG" doc:name="commdix error" doc:id="65f800b1-71a9-4d92-a589-976b323d1cdc" message="Not found in CommDix" category="app"/>
						</on-error-continue>
		</error-handler>
	</flow>
	<flow name="get-sap-order" doc:id="2828a92d-e31d-4979-9d56-232b9900700a" >
		<order-sapapi:get doc:name="Get SAP Order" doc:id="b9424177-5c51-4480-a968-f476a47b58fa" config-ref="Order_SAP_API_Config" id='#[vars.id as Number as String {format: "0000000000"}]' />
		<logger level="INFO" doc:name="Logger" doc:id="43ce3b62-9393-4b65-8ce9-7d3e5e50b9ce" message="#[output application/json ---payload]"/>
		<ee:transform doc:name="Transform Message getting Product Domain ID" doc:id="244a30b9-2575-4bb6-922f-dafc5c7c9c69">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java

---
(payload - "orderItems" - "customerId") 
	++ (orderItems: 
			payload.orderItems map {
				locationId: $.locationId default "l1",
			    orderLine: $.orderLine,
			    product: {
			        id: lookup('lookup_product_domain_id',$.product.id, 5000)
			    },
			    quantity: {
			        ordered: $.quantity.ordered,
			        shipped: $.quantity.shipped default 0
			    },
			    pricing: {
			    		itemAmount: $.pricing.itemAmount,
                     discountedAmount: $.pricing.discountedAmount,
                     totalAmount: $.pricing.totalAmount,
                     currency: {
                            code: $.pricing.currency.code default "USD"
                     }
			    },
			    delivery: {
			        method: $.delivery.method
			    }
			} default []
	  )
	++ (customerId: lookup('lookup_customer_domain_id', payload.customerId, 5000))
	

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<error-handler >
			<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="397774db-3b22-4974-a334-351b6ecedc77" type="ORDER-SAPAPI:NOT_FOUND">
							<ee:transform doc:name="Set Not Found" doc:id="c55f1e00-f6df-4789-bef5-122a24eff4ec">
								<ee:message>
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
""]]></ee:set-payload>
								</ee:message>
								<ee:variables>
									<ee:set-variable variableName="sapNotFound"><![CDATA[%dw 2.0
output application/java
---
true]]></ee:set-variable>
								</ee:variables>
							</ee:transform>
				<logger level="DEBUG" doc:name="Not found in SAP" doc:id="a0cf8941-6c82-449a-b840-e929cb59f73d" message="Not found in SAP" category="app"/>
						</on-error-continue>
		</error-handler>
	</flow>
	<sub-flow name="send-metrics" doc:id="3bc76e1b-498a-4a5e-ac9e-768a9268cc96" >
		<scatter-gather doc:name="Scatter-Gather" doc:id="b52adb9b-9793-46ff-99ed-465332ee5c1b">
			<route>
				<tracking:custom-event doc:name="Custom Business Event" doc:id="75deb722-c726-4708-b019-e2407b9d8d25" event-name="New Order">
					<tracking:meta-data key="customerId" value="#[vars.originalPayload.customerId]" />
					<tracking:meta-data key="totalAmount" value="#[vars.originalPayload.totalAmount]" />
					<tracking:meta-data key="totalProductQuantity" value="#[sum(vars.originalPayload.orderItems.quantity.ordered) default 0 as Number]" />
					<tracking:meta-data key="dateTime" value="#[vars.originalPayload.orderDateTime default now()]" />
					<tracking:meta-data key="channel" value="#[vars.sourceChannel]" />
				</tracking:custom-event>
			</route>
			<route>
				<custom-metrics:send doc:name="Send Custom Metric" doc:id="032c1a14-183a-4e9b-9f9f-361b81cab5be" metricName="NTO_Order">
					<custom-metrics:dimensions>
						<custom-metrics:dimension dimensionName="customer_id" value="#[vars.originalPayload.customerId]" />
						<custom-metrics:dimension dimensionName="channel" value="#[vars.sourceChannel]" />
						<custom-metrics:dimension dimensionName="currency" value='#[vars.originalPayload.currency.code default "USD"]' />
					</custom-metrics:dimensions>
					<custom-metrics:facts>
						<custom-metrics:fact factName="total_amount" value="#[vars.originalPayload.totalAmount as Number]" />
						<custom-metrics:fact factName="total_products_quantity" value="#[sum(vars.originalPayload.orderItems.quantity.ordered) default 0 as Number]" />
					</custom-metrics:facts>
				</custom-metrics:send>
			</route>
		</scatter-gather>
	</sub-flow>
	<flow name="post:\orders:application\json:order-api-spec-config">
        <ee:transform doc:name="Items by System" doc:id="01c052d6-0181-4a2f-938c-c58eb2a68a38" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="systems" ><![CDATA[%dw 2.0
output application/json
var commDixIds:Array<String> = lookup("get-commdix-product-ids", null) as Array<String>
var sapItems = payload[0].orderItems filter (item,i) -> not (commDixIds contains item.product.id)
var commdixItems = payload[0].orderItems filter (item,i) -> (commDixIds contains item.product.id)
---
{
	sap: sapItems,
	commdix: commdixItems,
}]]></ee:set-variable>
				<ee:set-variable variableName="originalPayload" ><![CDATA[%dw 2.0
output application/java
---
payload[0]]]></ee:set-variable>
				<ee:set-variable variableName="sourceChannel" ><![CDATA[%dw 2.0
output application/java
---
(attributes.headers."source-channel" default "MOBILE")]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Has SAP items" doc:id="91f4a150-1442-4f85-978a-d7d334eed212" >
			<when expression="#[sizeOf(vars.systems.sap) &gt; 0]" >
				<ee:transform doc:name="Create SAP requests" doc:id="7ce3c99d-771d-409d-8774-42ac1271209c">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="sapRequest"><![CDATA[%dw 2.0
output application/json
---
[
	(payload[0] - "orderItems" - "customerId") ++ {
		orderItems: vars.systems.sap map (
			($ - "product") ++ 
			{
				product: {
					//name: $.product.name,
					id: lookup('lookup_product_sap_id', $.product.id, 5000)
				}
			}
		),
		customerId: lookup('lookup_customer_sap_id', payload[0].customerId, 5000)
	}
]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="08f95991-7762-4891-a5ec-8c2248f88227" message="#[output application/json ---vars.sapRequest]"/>
				<order-sapapi:post doc:name="Create Order in SAP" doc:id="a1afe7f6-0cdd-4c68-a719-0c01cac2caf5" config-ref="Order_SAP_API_Config" target="sapResponse">
			<order-sapapi:post-request-data><![CDATA[#[vars.sapRequest]]]></order-sapapi:post-request-data>
		</order-sapapi:post>
			</when>
			<otherwise >
				<logger level="DEBUG" doc:name="Not Creating Order in SAP" doc:id="d92a0af7-b152-4429-99af-850e09513b38" message="Not Creating Order in SAP" category="app"/>
			</otherwise>
		</choice>
		<choice doc:name="Has CommDix items" doc:id="ef9b8802-a153-4db6-be77-a14cce2c47dd" >
			<when expression="#[sizeOf(vars.systems.commdix) &gt; 0]" >
				<ee:transform doc:name="Create CommDix Request" doc:id="57a7ec44-4693-40d9-bbb7-807ec3f947ff">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[
	(payload[0] - "orderItems" - "orderId" ) ++ {
		(orderId: vars.sapResponse.messages[0].itemId) if (vars.sapResponse.messages[0].itemId?),
		orderItems: vars.systems.commdix
	}
]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<order-apifor-comm-dix-my-sql:post doc:name="Create Order in CommDix" doc:id="f6cccf45-ad49-4516-a844-1cc9eaa75a44" config-ref="Order_API_for_CommDix_MySQL_Config" target="commdixResponse"/>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="58e2802c-4b17-4026-9eb7-62db7051b03a" message="Not Creating Order in CommDix" category="app"/>
			</otherwise>
		</choice>
		<flow-ref doc:name="Send Custom Metric" doc:id="d1095f7d-4e8d-4c00-b09c-57e4c0a8e9b1" name="send-metrics"/>
		<ee:transform doc:name="Transform Message" doc:id="1c0ab68b-401d-45d7-89dd-f5344be2150c">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
if (vars.sapResponse.messages[0].itemId?)
	vars.sapResponse
else
	vars.commdixResponse]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="497d8b5e-45d8-4522-a53f-b738e066c712" >
				<ee:transform doc:name="Transform Message" doc:id="64d85940-dd43-4631-9f21-f839a0ea3897" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "Unknown error"
}]]></ee:set-payload>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="httpStatus" ><![CDATA[%dw 2.0
output application/java
---
500]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</on-error-continue>
		</error-handler>
    </flow>
	<flow name="get-commdix-product-ids" doc:id="2b559d9a-b05d-4676-abdd-da0ddb48e1b0" >
		<ee:transform doc:name="CommDix IDs" doc:id="35b9155f-093b-4239-ac14-03616869824e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
["502101","502102"]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
